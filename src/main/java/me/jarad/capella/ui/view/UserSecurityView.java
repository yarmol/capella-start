package me.jarad.capella.ui.view;import com.vaadin.navigator.View;import com.vaadin.navigator.ViewChangeListener;import com.vaadin.server.FontAwesome;import com.vaadin.shared.MouseEventDetails;import com.vaadin.shared.ui.ValueChangeMode;import com.vaadin.spring.annotation.SpringView;import com.vaadin.ui.Button;import com.vaadin.ui.Grid;import com.vaadin.ui.HorizontalLayout;import com.vaadin.ui.TextField;import com.vaadin.ui.UI;import com.vaadin.ui.VerticalLayout;import com.vaadin.ui.Window;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.StringUtils;import java.util.Set;import me.jarad.capella.model.security.User;import me.jarad.capella.persistance.services.UserService;import me.jarad.capella.ui.incubating.ItemViewWindow;/** * @author vyarmole on 07.04.17. */@SpringView(name = "security")public class UserSecurityView extends VerticalLayout implements View {  private Logger LOGGER = LoggerFactory.getLogger(UserSecurityView.class);  UserService userService;  final Grid<User> grid;  final TextField filter;  private final Button addNewBtn;  private final Button deleteBtn;  @Autowired  public UserSecurityView(UserService userService) {    this.userService = userService;    this.grid = new Grid<>(User.class);    this.filter = new TextField();    this.addNewBtn = new Button("New user", FontAwesome.PLUS_CIRCLE);    this.deleteBtn = new Button("Delete user", FontAwesome.MINUS_CIRCLE);    setMargin(true);    HorizontalLayout actions    = new HorizontalLayout(filter, addNewBtn, deleteBtn);    VerticalLayout mainLayout   = new VerticalLayout(actions, grid);    addComponent(mainLayout);       grid.setColumns("id", "name", "pwd");    grid.setHeight(100, Unit.PERCENTAGE);    grid.setWidth(100, Unit.PERCENTAGE);    grid.setSelectionMode(Grid.SelectionMode.SINGLE);    grid.addItemClickListener(event ->  {      MouseEventDetails mouseEventDetails = event.getMouseEventDetails();      if (mouseEventDetails.isDoubleClick()) {        User item = event.getItem();        showItem();      }    });       filter.setPlaceholder("Filter by name");    // Hook logic to components    // Replace listing with filtered content when user changes filter    filter.setValueChangeMode(ValueChangeMode.LAZY);    filter.addValueChangeListener(e -> listCustomers(e.getValue()));    // Connect selected Customer to editor or hide if none is selected    /*grid.asSingleSelect().addValueChangeListener(e -> {      editor.editCustomer(e.getValue());    });*/    // Instantiate and edit new Customer the new button is clicked    addNewBtn.addClickListener(e -> {      showItem();    });    deleteBtn.addClickListener(e -> {      Set<User> selectedItems = grid.getSelectedItems();      if (selectedItems != null && !selectedItems.isEmpty()) {        User item = selectedItems.iterator().next();        userService.removeUser(item.getId());      }    });    // Initialize listing    listCustomers(null);  }  private void showItem() {    Window userWindowView = new ItemViewWindow<User>(userService);    UI.getCurrent().addWindow(userWindowView);  }  void listCustomers(String filterText) {    if (StringUtils.isEmpty(filterText)) {      grid.setItems(userService.getUsers());    } else {      grid.setItems(userService.getUserByName(filterText));    }  }  @Override  public void enter(ViewChangeListener.ViewChangeEvent event) {  }}