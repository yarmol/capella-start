package me.jarad.capella.ui.view;import com.google.common.base.CaseFormat;import com.vaadin.server.FontAwesome;import com.vaadin.ui.Button;import com.vaadin.ui.HorizontalLayout;import com.vaadin.ui.Label;import com.vaadin.ui.TextField;import com.vaadin.ui.VerticalLayout;import com.vaadin.ui.Window;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.HashMap;import java.util.Map;import me.jarad.capella.model.security.User;import me.jarad.capella.persistance.services.UserService;/** * @author vyarmole on 07.04.17. */public class ItemViewWindow<T> extends Window {  private Logger LOGGER = LoggerFactory.getLogger(ItemViewWindow.class);  private Class typeClass = User.class;  private String windowName = "User.class";  public ItemViewWindow(UserService service) {    super("User.class");    generateWindow(service);  }  private void generateWindow(UserService service) {    VerticalLayout subContent = new VerticalLayout();    setContent(subContent);    subContent.addComponent(new Label("User.class"));    User user = null;    Map<String, String> objectValues = new HashMap<>();    Object data = getData();    if (data != null) {      user = (User) data;    }    Map<String, String> values = new HashMap<>();    Field[] fields = typeClass.getDeclaredFields();    for (Field field : fields) {      Class<?> type = field.getType();      String name   = field.getName();      if (user != null) {        objectValues.put(name, getFieldValue(user, field));      }      if (type.equals(String.class) || type.equals(long.class)) {        HorizontalLayout line = new HorizontalLayout();        Label label = new Label(name);        label.setWidth(50, Unit.PIXELS);        line.addComponent(label);        TextField textField = new TextField();        textField.setSizeFull();        textField.setId(name);        if (user != null) {          textField.setValue(objectValues.get(name));        }                textField.addValueChangeListener(event -> values.put(name,event.getValue()));        line.addComponent(textField);        subContent.addComponent(line);      }    }    HorizontalLayout footerButtons = new HorizontalLayout();    // Put some components in it    Button okButton    = new Button("OK", FontAwesome.CHECK);    Button closeButton = new Button("Close", FontAwesome.CLOSE);    okButton.addClickListener( e -> {      User newUser = new User();      for (Map.Entry<String, String> entry : values.entrySet()) {        LOGGER.info(entry.getKey() + " = " + entry.getValue());      }      newUser.setName(values.get("name"));      newUser.setPwd(values.get("pwd"));      service.save(newUser);    });    closeButton.addClickListener(e -> {      this.close();    });    footerButtons.addComponent(okButton);    footerButtons.addComponent(closeButton);    subContent.addComponent(footerButtons);    // Center it in the browser window    //setHeight(80, Unit.PERCENTAGE);    //setWidth(80, Unit.PERCENTAGE);    setResizable(false);    setHeightUndefined();    center();  }  private String getFieldValue(User user, Field field) {    String getterName = "get" + CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL,field.getName());    Method getterMethod = null;    String result = null;    try {      getterMethod = user.getClass().getMethod(getterName);      result = (String) getterMethod.invoke(user);    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {      e.printStackTrace();    }    return result;  }}