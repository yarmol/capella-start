package me.jarad.capella.ui.forms;import com.vaadin.navigator.Navigator;import com.vaadin.server.DefaultErrorHandler;import com.vaadin.spring.navigator.SpringViewProvider;import com.vaadin.ui.Alignment;import com.vaadin.ui.Button;import com.vaadin.ui.Component;import com.vaadin.ui.HorizontalLayout;import com.vaadin.ui.Label;import com.vaadin.ui.Notification;import com.vaadin.ui.Panel;import com.vaadin.ui.TabSheet;import com.vaadin.ui.UI;import com.vaadin.ui.VerticalLayout;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.security.access.AccessDeniedException;import org.springframework.security.core.context.SecurityContextHolder;import java.time.LocalTime;import java.time.format.DateTimeFormatter;import java.util.Timer;import java.util.TimerTask;import me.jarad.capella.services.BackendService;import me.jarad.capella.ui.MainUI;import me.jarad.capella.ui.view.AccessDeniedView;import me.jarad.capella.ui.view.ErrorView;/** * @author vyarmole on 07.04.17. */public class MainScreenForm extends VerticalLayout {  private Logger LOGGER = LoggerFactory.getLogger(MainUI.class);  private Label timeAndUser;  private Timer timer;  private UI ui;  public void getMainScreenFormButtons() {    this.ui = UI.getCurrent();    BackendService backendService = ((MainUI) ui).getBackendService();    SpringViewProvider viewProvider = ((MainUI) ui).getViewProvider();    ErrorView errorView = ((MainUI) ui).getErrorView();    this.setMargin(true);    this.setSpacing(true);    this.setSizeFull();    HorizontalLayout buttons = new HorizontalLayout();    buttons.setSpacing(true);    this.addComponent(buttons);    buttons.addComponent(new Button("Invoke user method", event -> {      // This method should be accessible by both 'user' and 'admin'.      Notification.show(backendService.userMethod());    }));    buttons.addComponent(new Button("Navigate to user view", event -> {      ui.getNavigator().navigateTo("");    }));    buttons.addComponent(new Button("Invoke admin method", event -> {      // This method should be accessible by 'admin' only.      Notification.show(backendService.adminMethod());    }));    buttons.addComponent(new Button("Navigate to admin view", event -> {       ui.getNavigator().navigateTo("admin");    }));    buttons.addComponent(new Button("Permission", event -> {      ui.getNavigator().navigateTo("security");    }));    buttons.addComponent(new Button("Logout", event -> logout()));    timeAndUser = new Label();    timeAndUser.setSizeUndefined();    buttons.addComponent(timeAndUser);    buttons.setComponentAlignment(timeAndUser, Alignment.MIDDLE_LEFT);    Panel viewContainer = new Panel();    viewContainer.setSizeFull();    this.addComponent(viewContainer);    this.setExpandRatio(viewContainer, 1.0f);    setErrorHandler(this::handleError);    Navigator navigator = new Navigator(ui, viewContainer);    navigator.addProvider(viewProvider);    navigator.setErrorView(errorView);    viewProvider.setAccessDeniedViewClass(AccessDeniedView.class);    // Fire up a timer to demonstrate server push. Do NOT use timers in real-world applications, use a thread pool.    timer = new Timer();    timer.schedule(new TimerTask() {      @Override      public void run() {        updateTimeAndUser();      }    }, 1000L, 1000L);  }  public MainScreenForm() {    this.ui = UI.getCurrent();    BackendService backendService = ((MainUI)ui).getBackendService();    SpringViewProvider viewProvider = ((MainUI) ui).getViewProvider();    ErrorView errorView = ((MainUI) ui).getErrorView();    /* this.setMargin(true);    this.setSpacing(true);    this.setSizeFull(); */        /*    HorizontalLayout buttons = new HorizontalLayout();    buttons.setSpacing(true);    this.addComponent(buttons);*/    /*buttons.addComponent(new Button("Invoke user method", event -> {      // This method should be accessible by both 'user' and 'admin'.      Notification.show(backendService.userMethod());    }));    buttons.addComponent(new Button("Navigate to user view", event -> {      ui.getNavigator().navigateTo("");    }));    buttons.addComponent(new Button("Invoke admin method", event -> {      // This method should be accessible by 'admin' only.      Notification.show(backendService.adminMethod());    }));    buttons.addComponent(new Button("Navigate to admin view", event -> {       ui.getNavigator().navigateTo("admin");    }));    buttons.addComponent(new Button("Permission", event -> {      ui.getNavigator().navigateTo("security");    }));    buttons.addComponent(new Button("Logout", event -> logout()));     */    TabSheet tabSheet = new TabSheet();    tabSheet.addSelectedTabChangeListener(event -> {      TabSheet selectedTabSheet = event.getTabSheet();      Component selectedTab = selectedTabSheet.getSelectedTab();      if (selectedTab.getId().equals("Mercury")) {        Notification.show(backendService.userMethod());      } else if (selectedTab.getId().equals("Venus")) {        ui.getNavigator().navigateTo("");      } else if (selectedTab.getId().equals("Earth")) {        ui.getNavigator().navigateTo("security");    }    });    tabSheet.addTab(newTab("Mercury"));    tabSheet.addTab(newTab("Venus"));    tabSheet.addTab(newTab("Earth"));    tabSheet.setSizeFull();    addComponent(tabSheet);    this.setExpandRatio(tabSheet, 1.0f);    /*timeAndUser = new Label();    timeAndUser.setSizeUndefined();    buttons.addComponent(timeAndUser);    buttons.setComponentAlignment(timeAndUser, Alignment.MIDDLE_LEFT);    Panel viewContainer = new Panel();    viewContainer.setSizeFull();    this.addComponent(viewContainer);    this.setExpandRatio(viewContainer, 1.0f);    setErrorHandler(this::handleError);    Navigator navigator = new Navigator(ui, viewContainer);    navigator.addProvider(viewProvider);    navigator.setErrorView(errorView);    viewProvider.setAccessDeniedViewClass(AccessDeniedView.class);    // Fire up a timer to demonstrate server push. Do NOT use timers in real-world applications, use a thread pool.    timer = new Timer();    timer.schedule(new TimerTask() {      @Override      public void run() {        updateTimeAndUser();      }    }, 1000L, 1000L);  */  }  private VerticalLayout newTab(String id) {    SpringViewProvider viewProvider = ((MainUI) ui).getViewProvider();    ErrorView errorView = ((MainUI) ui).getErrorView();    Panel viewContainer = new Panel();    viewContainer.setSizeFull();   // this.addComponent(viewContainer);   // this.setExpandRatio(viewContainer, 1.0f);    Navigator navigator = new Navigator(ui, viewContainer);    navigator.addProvider(viewProvider);    navigator.setErrorView(errorView);    viewProvider.setAccessDeniedViewClass(AccessDeniedView.class);    VerticalLayout tab1 = new VerticalLayout();    tab1.setId(id);    tab1.addComponent(viewContainer);    tab1.setExpandRatio(viewContainer, 1.0f);    tab1.setCaption(id);    return tab1;  }  private void logout() {    ui.getPage().reload();    ui.getSession().close();  }  private void updateTimeAndUser() {    // Demonstrate that server push works and that you can even access the security context from within the    // access(...) method.    ui.access(() -> timeAndUser.setValue(String.format("The server-side time is %s and the current user is %s",            LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")),            SecurityContextHolder.getContext().getAuthentication().getName())));  }  private void handleError(com.vaadin.server.ErrorEvent event) {    Throwable t = DefaultErrorHandler.findRelevantThrowable(event.getThrowable());    if (t instanceof AccessDeniedException) {      Notification.show("You do not have permission to perform this operation",              Notification.Type.WARNING_MESSAGE);    } else {      DefaultErrorHandler.doDefault(event);    }  }}